//----------------------------------------------------------------------------
void v_MaterialTextureL1
(
    in float4        kModelPosition  : POSITION,
    in float3        kModelNormal    : NORMAL,
    in float2        kInBaseTCoord   : TEXCOORD0,
    out float4       kClipPosition   : POSITION,
    out float2       kOutBaseTCoord  : TEXCOORD0,
    out float4       kWorldLight     : TEXCOORD1,
    out float3       kWorldView      : TEXCOORD2,
    out float3       kWorldNormal    : TEXCOORD3,

    // Renderer constants.
    uniform float4x4 WMatrix,
    uniform float4x4 VPMatrix,
    uniform float3   CameraWorldPosition,
    uniform float4   Light0WorldPosition,
    uniform float4   Light0WorldDirection,
    uniform float4   Light0Attenuation
)
{
    float4 kWorldPosition = mul(kModelPosition, WMatrix);
    kClipPosition = mul(kWorldPosition, VPMatrix);

    // Compute world space view direction vector.
    kWorldView = CameraWorldPosition - kWorldPosition.xyz;
    
    // Compute world space light0 direction vector and attenuation factor.
    kWorldLight.w = 1.0f;
    if( Light0WorldPosition.w != 0.0f )
    {
        // This is a point or spot light.
        
        kWorldLight.xyz = Light0WorldPosition.xyz - kWorldPosition.xyz;
        
        float3 kAttDist;
        kAttDist.x = 1.0f;
        kAttDist.z = dot(kWorldLight.xyz, kWorldLight.xyz);
        kAttDist.y = sqrt(kAttDist.z);
        kWorldLight.w = Light0Attenuation.w/dot(kAttDist, Light0Attenuation.xyz);
    }
    else
    {
        // This is a directional light.
        
        kWorldLight.xyz = -Light0WorldDirection.xyz;
    }

    // Compute world space normal vector.
    kWorldNormal = mul(kModelNormal, (float3x3)WMatrix);
	
    kOutBaseTCoord = kInBaseTCoord;
}
//----------------------------------------------------------------------------
void p_MaterialTextureL1
(
    in float4         kPosition     : POSITION,
    in float2         kBaseTCoord   : TEXCOORD0,
    in float4         kWorldLight   : TEXCOORD1,
    in float3         kWorldView    : TEXCOORD2,
    in float3         kWorldNormal  : TEXCOORD3,
    out float4        kPixelColor   : COLOR,

    // Renderer constants.
    uniform float4 MaterialSpecular,
    uniform float3 Light0Ambient,
    uniform float3 Light0Diffuse,
    uniform float3 Light0Specular,

    // Samplers.
    uniform sampler2D BaseSampler
)
{
    // Fetch base color.
    float4 kBaseColor = tex2D(BaseSampler, kBaseTCoord);

    // Normalize view direction, light0 direction and normal vector.
    float3 kViewDirection = normalize(kWorldView);
    float3 kLightDirection = normalize(kWorldLight.xyz);
    float3 kNormal = normalize(kWorldNormal);

    // Compute N dot L.
    float fNdL = dot(kNormal, kLightDirection);
    
    // Compute reflection vector.
    vec3 kReflection = (2.0f*fNdL*kNormal) - kLightDirection;
    
    // Compute R dot V.
    float fRdV = max(0.0f, dot(kReflection, kViewDirection));
    
    // Compute ambient component.
    float3 kAmbient = Light0Ambient * kBaseColor.rgb * 0.65f;
    
    // Compute diffuse component.
    fNdL = max(0.0f, fNdL);
    float3 kDiffuse = fNdL * Light0Diffuse * kBaseColor.rgb * 0.2f;
    
    // Compute specular component.
    float3 kSpecular = pow(fRdV, MaterialSpecular.a) * Light0Specular * 0.1f;
    
    // Compute the sum of light0's components, and multiply it with computed
    // attenuation factor.
    float3 kFinalColor = kWorldLight.w * (kAmbient + kDiffuse + 
        kSpecular);

    kPixelColor.rgb = kFinalColor;
    kPixelColor.a = kBaseColor.a;
}
//----------------------------------------------------------------------------