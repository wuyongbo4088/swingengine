//----------------------------------------------------------------------------
// 名称:skin material texture effect类专用的VS,PS.
// 说明:由GPU进行蒙皮顶点计算.所依附的node必须带有material state对象.
// 作者:Sun Che
// 时间:20080901
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
void v_SkinMaterialTexture
(
    in float4        kModelPosition : POSITION,
    in float3        kModelNormal   : NORMAL,
    in float2        kInBaseTCoord  : TEXCOORD0,
    in float4        kBlendWeight   : TEXCOORD1,
    in float4        kBlendIndices  : TEXCOORD2,
    out float4       kClipPosition  : POSITION,
    out float4       kDiffuseColor  : COLOR,
    out float2       kOutBaseTCoord : TEXCOORD0,
    uniform float4x4 VPMatrix,
    uniform float4   MaterialDiffuse,
    uniform float4x4 SkinMatrix[32]
)
{
    float3 kWorldNormal;

    int iBone1 = kBlendIndices.x;
    int iBone2 = kBlendIndices.y;
    int iBone3 = kBlendIndices.z;
    int iBone4 = kBlendIndices.w;

    kClipPosition = mul(kModelPosition, SkinMatrix[iBone1])*kBlendWeight.x +
                    mul(kModelPosition, SkinMatrix[iBone2])*kBlendWeight.y + 
                    mul(kModelPosition, SkinMatrix[iBone3])*kBlendWeight.z +
                    mul(kModelPosition, SkinMatrix[iBone4])*kBlendWeight.w;

    kClipPosition = mul(kClipPosition, VPMatrix);

    kWorldNormal = mul(kModelNormal, (float3x3)SkinMatrix[iBone1])*kBlendWeight.x + 
                   mul(kModelNormal, (float3x3)SkinMatrix[iBone2])*kBlendWeight.y +
                   mul(kModelNormal, (float3x3)SkinMatrix[iBone3])*kBlendWeight.z +
                   mul(kModelNormal, (float3x3)SkinMatrix[iBone4])*kBlendWeight.w;
    kWorldNormal = normalize(kWorldNormal);
	
    kDiffuseColor = MaterialDiffuse;	
    kOutBaseTCoord = kInBaseTCoord;
}
//----------------------------------------------------------------------------
void p_SkinMaterialTexture
(
    in float4         kPosition     : POSITION,
    in float4         kDiffuseColor : COLOR,
    in float2         kBaseTCoord   : TEXCOORD0,
    out float4        kPixelColor   : COLOR,
    uniform sampler2D BaseSampler
)
{
    float4 kBaseColor = tex2D(BaseSampler, kBaseTCoord);
    kPixelColor.rgb = saturate(kBaseColor.rgb + kDiffuseColor.rgb*0.1);
    
    kPixelColor.a = kBaseColor.a*kDiffuseColor.a;
}
//----------------------------------------------------------------------------